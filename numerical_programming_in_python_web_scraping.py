# -*- coding: utf-8 -*-
"""Numerical Programming in Python - Web Scraping.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y8noPteKOT1MuMYRzRMmhRRLafhzWLX0

# **Web Scraping & Data Handling Challenge**

### **Website:**
JustWatch -  https://www.justwatch.com/in/movies?release_year_from=2000


### **Description:**

JustWatch is a popular platform that allows users to search for movies and TV shows across multiple streaming services like Netflix, Amazon Prime, Hulu, etc. For this assignment, you will be required to scrape movie and TV show data from JustWatch using Selenium, Python, and BeautifulSoup. Extract data from HTML, not by directly calling their APIs. Then, perform data filtering and analysis using Pandas, and finally, save the results to a CSV file.

### **Tasks:**

**1. Web Scraping:**

Use BeautifulSoup to scrape the following data from JustWatch:

   **a. Movie Information:**

      - Movie title
      - Release year
      - Genre
      - IMDb rating
      - Streaming services available (Netflix, Amazon Prime, Hulu, etc.)
      - URL to the movie page on JustWatch

   **b. TV Show Information:**

      - TV show title
      - Release year
      - Genre
      - IMDb rating
      - Streaming services available (Netflix, Amazon Prime, Hulu, etc.)
      - URL to the TV show page on JustWatch

  **c. Scope:**

```
 ` - Scrape data for at least 50 movies and 50 TV shows.
   - You can choose the entry point (e.g., starting with popular movies,
     or a specific genre, etc.) to ensure a diverse dataset.`

```


**2. Data Filtering & Analysis:**

   After scraping the data, use Pandas to perform the following tasks:

   **a. Filter movies and TV shows based on specific criteria:**

   ```
      - Only include movies and TV shows released in the last 2 years (from the current date).
      - Only include movies and TV shows with an IMDb rating of 7 or higher.
```

   **b. Data Analysis:**

   ```
      - Calculate the average IMDb rating for the scraped movies and TV shows.
      - Identify the top 5 genres that have the highest number of available movies and TV shows.
      - Determine the streaming service with the most significant number of offerings.
      
   ```   

**3. Data Export:**

```
   - Dump the filtered and analysed data into a CSV file for further processing and reporting.

   - Keep the CSV file in your Drive Folder and Share the Drive link on the colab while keeping view access with anyone.
```

**Submission:**
```
- Submit a link to your Colab made for the assignment.

- The Colab should contain your Python script (.py format only) with clear
  comments explaining the scraping, filtering, and analysis process.

- Your Code shouldn't have any errors and should be executable at a one go.

- Before Conclusion, Keep your Dataset Drive Link in the Notebook.
```



**Note:**

1. Properly handle errors and exceptions during web scraping to ensure a robust script.

2. Make sure your code is well-structured, easy to understand, and follows Python best practices.

3. The assignment will be evaluated based on the correctness of the scraped data, accuracy of data filtering and analysis, and the overall quality of the Python code.

# **Start The Project**

## **Task 1:- Web Scrapping**
"""

#Installing all necessary labraries
!pip install bs4
!pip install requests

#import all necessary labraries
import requests
from bs4 import BeautifulSoup
import re
import pandas as pd
import numpy as np

"""## **Scrapping Movies Data**"""

def fetch_movie_urls(url):
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'
    }
    response = requests.get(url, headers=headers)
    if response.status_code != 200:
        return "Failed to retrieve the page, status code:", response.status_code
    soup = BeautifulSoup(response.text, 'html.parser')
    return soup


url = 'https://www.justwatch.com/in/movies?release_year_from=2000'
soup=fetch_movie_urls(url)
print(soup.prettify())

## Hint : Use the following code to extract the film urls
# movie_links = soup.find_all('a', href=True)
# movie_urls = [link['href'] for link in movie_links if '/movie/' in link['href']]

# url_list=[]
# for x in movie_urls:
#   url_list.append('https://www.justwatch.com'+x)

import requests
from bs4 import BeautifulSoup # This is the library used to perform webscraping
import re
import pandas as pd
import numpy as np

headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
    'Accept-Language': 'en-US,en;q=0.9',
    'Accept-Encoding': 'gzip, deflate, br',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
}

"""## **Fetching Movie URL's**"""

# Write Your Code here
headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'
    }
# fetch movie urls
movie_url=[]
for x in soup.find_all('a',class_="title-list-grid__item--link"):
 movie_url.append('https://www.justwatch.com'+ x['href'])
print(movie_url)
print(len(movie_url))

"""## **Scrapping Movie Title**"""

# fetch movie titles
movie_titles=[]
for url in movie_url:
  try:
    content = requests.get(url,headers=headers)
    soup = BeautifulSoup(content.text,'html.parser')
    title = soup.find_all('h1')[0].text
  except:
    title = 'NA'
  movie_titles.append(title)
print(len(movie_titles))
print((movie_titles))

"""## **Scrapping release Year**"""

# Write Your Code here
movie_year=[]
for url in movie_url:
  try:
    content=requests.get(url,headers=headers)
    soup=BeautifulSoup(content.text,'html.parser')
    year=soup.find_all('span',class_='release-year')[0].text.strip('()')
  except:
   year='NA'
  movie_year.append(year)
print(movie_year)
print(len(movie_year))

"""## **Scrapping Genres**"""

# Write Your Code here
movie_genre=[]
for url in movie_url:
  try:
    content=requests.get(url,headers=headers)
    soup=BeautifulSoup(content.text,'html.parser')
    for x in soup.find_all('div',class_='detail-infos'):
     if x.find_all('h3')[0].text=='Genres':
      genre=x.find_all('span')[0].text
  except:
    genre='NA'
  movie_genre.append(genre)
print(movie_genre)

"""## **Scrapping IMBD Rating**"""

# Write Your Code here
movie_rating=[]
for url in movie_url:
  try:
    content=requests.get(url,headers=headers)
    soup=BeautifulSoup(content.text,'html.parser')
    for x in soup.find_all('div',class_='poster-detail-infos'):
     if x.find_all('h3')[0].text=='Rating':
      rating=x.find_all('div')[0].text
  except:
   rating='NA'
  movie_rating.append(rating)
print(movie_rating)

"""## **Scrapping Runtime/Duration**"""

# Write Your Code here
movie_runtime=[]
for url in movie_url:
  try:
    content=requests.get(url,headers=headers)
    soup=BeautifulSoup(content.text,'html.parser')
    for x in soup.find_all('div',class_='detail-infos'):
     if x.find_all('h3')[0].text=='Runtime':
      runtime=x.find_all('div')[0].text
  except:
   runtime='NA'
  movie_runtime.append(runtime)
print(movie_runtime)

"""## **Scrapping Age Rating**"""

# Write Your Code here
movie_agerating=[]
for url in movie_url:
  try:
    content=requests.get(url,headers=headers)
    soup=BeautifulSoup(content.text,'html.parser')
    for x in soup.find_all('div',class_='detail-infos'):
     if x.find_all('h3')[0].text=='Age rating':
      age_rating=x.find_all('div')[0].text
  except:
   runtime='NA'
  movie_agerating.append(age_rating)
print(movie_agerating)

"""## **Fetching Production Countries Details**"""

# Write Your Code here
movie_country=[]
for url in movie_url:
  try:
   content=requests.get(url,headers=headers)
   soup=BeautifulSoup(content.text,'html.parser')
   for x in soup.find_all('div',class_='detail-infos'):
    if x.find_all('h3')[0].text==' Production country ':
     country=x.find_all('div')[0].text
  except:
   runtime='NA'
  movie_country.append(country)
print(movie_country)

"""## **Fetching Streaming Service Details**"""

# Write Your Code here
movie_stream_service=[]
for url in movie_url:
  try:
   content=requests.get(url,headers=headers)
   soup=BeautifulSoup(content.text,'html.parser')
   names=[x['alt'] for x in soup.find_all('img',class_='offer__icon')]
  except:
   names='NA'
  movie_stream_service.append(" , ".join(names))
print(movie_stream_service)

"""## **Now Creating Movies DataFrame**"""

# Write Your Code here
info={'movie_url':movie_url,
      'movie_name':movie_titles,
      'release_year':movie_year,
      'movie_rating':movie_rating,
      'movie_genre':movie_genre,
      'movie_runtime':movie_runtime,
      'movie_agerating':movie_agerating,
      'movie_country':movie_country,
      'movie_stream_service' :movie_stream_service}
data=pd.DataFrame(info)

data

"""## **Scraping TV  Show Data**"""

# Specifying the URL from which tv show related data will be fetched
tv_url='https://www.justwatch.com/in/tv-shows?release_year_from=2000'
# Sending an HTTP GET request to the URL
page=requests.get(tv_url)
# Parsing the HTML content using BeautifulSoup with the 'html.parser'
soup=BeautifulSoup(page.text,'html.parser')
# Printing the prettified HTML content
print(soup.prettify())

"""## **Fetching Tv shows Url details**"""

# Write Your Code here
def fetch_tv_show_url(url):
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'
    }
    response = requests.get(url, headers=headers)
    if response.status_code != 200:
        return "Failed to retrieve the page, status code:", response.status_code
    soup = BeautifulSoup(response.text, 'html.parser')
    return soup


url = 'https://www.justwatch.com/in/tv-shows?release_year_from=2000'
soup=fetch_movie_urls(url)
print(soup.prettify())

headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
    'Accept-Language': 'en-US,en;q=0.9',
    'Accept-Encoding': 'gzip, deflate, br',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
}

# fetch Tv shows urls
tv_show_url=[]
for x in soup.find_all('a',attrs={"class":"title-list-grid__item--link"}):
  tv_show_url.append('https://www.justwatch.com'+ x['href'])
print(tv_show_url)

"""## **Fetching Tv Show Title details**"""

# Write Your Code here
tvshow_titles=[]
for url in tv_show_url:
  try:
    content=requests.get(url,headers=headers)
    soup=BeautifulSoup(content.text,'html.parser')
    title=soup.find_all('h1')[0].text
  except:
   title='NA'
  tvshow_titles.append(title)
print(len(tvshow_titles))
print(tvshow_titles)

"""## **Fetching Release Year**"""

# Write Your Code here
tvshow_year=[]
for url in tv_show_url:
  try:
    content=requests.get(url,headers=headers)
    soup=BeautifulSoup(content.text,'html.parser')
    year=soup.find_all('span',class_='release-year')[0].text
  except:
   year='NA'
  tvshow_year.append(year)
print(tvshow_year)
print(len(tvshow_year))

"""## **Fetching TV Show Genre Details**"""

# Write Your Code here
tvshow_genre=[]
for url in tv_show_url:
  try:
    content=requests.get(url,headers=headers)
    soup=BeautifulSoup(content.text,'html.parser')
    for x in soup.find_all('div',class_='detail-infos'):
     if x.find_all('h3')[0].text=='Genres':
      genre=x.find_all('span')[0].text
  except:
    genre='NA'
  tvshow_genre.append(genre)
print(tvshow_genre)

"""## **Fetching IMDB Rating Details**"""

# Write Your Code here
tvshow_rating=[]
for url in tv_show_url:
  try:
    content=requests.get(url,headers=headers)
    soup=BeautifulSoup(content.text,'html.parser')
    for x in soup.find_all('div',class_='poster-detail-infos'):
     if x.find_all('h3')[0].text=='Rating':
      rating=x.find_all('div')[0].text
  except:
   rating='NA'
  tvshow_rating.append(rating)
print(tvshow_rating)

"""## **Fetching Age Rating Details**"""

# Write Your Code here
tvshow_agerating=[]
for url in tv_show_url:
  try:
    content=requests.get(url,headers=headers)
    soup=BeautifulSoup(content.text,'html.parser')
    for x in soup.find_all('div',class_='detail-infos'):
     if x.find_all('h3')[0].text=='Age rating':
      age_rating=x.find_all('div')[0].text
  except:
   runtime='NA'
  tvshow_agerating.append(age_rating)
print(tvshow_agerating)

"""## **Fetching Production Country details**"""

# Write Your Code here
tvshow_country=[]
for url in tv_show_url:
  try:
   content=requests.get(url,headers=headers)
   soup=BeautifulSoup(content.text,'html.parser')
   for x in soup.find_all('div',class_='detail-infos'):
    if x.find_all('h3')[0].text==' Production country ':
     country=x.find_all('div')[0].text
  except:
   runtime='NA'
  tvshow_country.append(country)
print(tvshow_country)

"""## **Fetching Streaming Service details**"""

# Write Your Code here
tvshow_stream_service=[]
for url in tv_show_url:
  try:
   content=requests.get(url,headers=headers)
   soup=BeautifulSoup(content.text,'html.parser')
   names=[x['alt'] for x in soup.find_all('img',class_='offer__icon')]
  except:
   names='NA'
  tvshow_stream_service.append(" , ".join(names))
print(tvshow_stream_service)

"""## **Fetching Duration Details**"""

# Write Your Code here
tvshow_runtime=[]
for url in tv_show_url:
  try:
    content=requests.get(url,headers=headers)
    soup=BeautifulSoup(content.text,'html.parser')
    for x in soup.find_all('div',class_='detail-infos'):
     if x.find_all('h3')[0].text=='Runtime':
      runtime=x.find_all('div')[0].text
  except:
   runtime='NA'
  tvshow_runtime.append(runtime)
print(tvshow_runtime)

"""## **Creating TV Show DataFrame**"""

# Write Your Code here
info={'tvshow_url':tv_show_url,
      'tvshow_name':tvshow_titles,
      'tvshow_release_year':tvshow_year,
      'tvshow_rating':tvshow_rating,
      'tvshow_genre':tvshow_genre,
      'tvshow_runtime':tvshow_runtime,
      'tvshow_agerating':tvshow_agerating,
      'tvshow_stream_service' :tvshow_stream_service}
data=pd.DataFrame(info)

data

"""## **Task 2 :- Data Filtering & Analysis**"""

# Write Your Code here

"""## **Calculating Mean IMDB Ratings for both Movies and Tv Shows**"""

# Write Your Code here

"""## **Analyzing Top Genres**"""

# Write Your Code here

#Let's Visvalize it using word cloud

"""## **Finding Predominant Streaming Service**"""

# Write Your Code here

#Let's Visvalize it using word cloud

"""## **Task 3 :- Data Export**"""

#saving final dataframe as Final Data in csv format

#saving filter data as Filter Data in csv format

"""# **Dataset Drive Link (View Access with Anyone) -**

# ***Congratulations!!! You have completed your Assignment.***
"""